%bcond_without tests
%bcond_without weak_deps

%global __os_install_post %(echo '%{__os_install_post}' | sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')
%global __provides_exclude_from ^/opt/ros/kilted/.*$
%global __requires_exclude_from ^/opt/ros/kilted/.*$

%global __cmake_in_source_build 1

Name:           ros-kilted-joint-state-topic-hardware-interface
Version:        0.2.1
Release:        1%{?dist}%{?release_suffix}
Summary:        ROS joint_state_topic_hardware_interface package

License:        Apache License 2.0
URL:            https://github.com/ros-controls/topic_based_hardware_interfaces
Source0:        %{name}-%{version}.tar.gz

Requires:       ros-kilted-angles
Requires:       ros-kilted-hardware-interface
Requires:       ros-kilted-rclcpp
Requires:       ros-kilted-sensor-msgs
Requires:       ros-kilted-ros-workspace
BuildRequires:  ros-kilted-ament-cmake
BuildRequires:  ros-kilted-angles
BuildRequires:  ros-kilted-hardware-interface
BuildRequires:  ros-kilted-rclcpp
BuildRequires:  ros-kilted-ros2-control-cmake
BuildRequires:  ros-kilted-sensor-msgs
BuildRequires:  ros-kilted-ros-workspace
Provides:       %{name}-devel = %{version}-%{release}
Provides:       %{name}-doc = %{version}-%{release}
Provides:       %{name}-runtime = %{version}-%{release}

%if 0%{?with_tests}
BuildRequires:  ros-kilted-ament-cmake-gmock
BuildRequires:  ros-kilted-controller-manager
BuildRequires:  ros-kilted-joint-state-broadcaster
BuildRequires:  ros-kilted-joint-trajectory-controller
BuildRequires:  ros-kilted-launch
BuildRequires:  ros-kilted-launch-ros
BuildRequires:  ros-kilted-launch-testing
BuildRequires:  ros-kilted-rclpy
BuildRequires:  ros-kilted-robot-state-publisher
BuildRequires:  ros-kilted-ros-testing
BuildRequires:  ros-kilted-ros2-control-test-assets
BuildRequires:  ros-kilted-xacro
%endif

%description
ros2_control hardware interface for JointState topic based control

%prep
%autosetup -p1

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/kilted/setup.sh" ]; then . "/opt/ros/kilted/setup.sh"; fi
mkdir -p .obj-%{_target_platform} && cd .obj-%{_target_platform}
%cmake3 \
    -UINCLUDE_INSTALL_DIR \
    -ULIB_INSTALL_DIR \
    -USYSCONF_INSTALL_DIR \
    -USHARE_INSTALL_PREFIX \
    -ULIB_SUFFIX \
    -DCMAKE_INSTALL_PREFIX="/opt/ros/kilted" \
    -DAMENT_PREFIX_PATH="/opt/ros/kilted" \
    -DCMAKE_PREFIX_PATH="/opt/ros/kilted" \
    -DSETUPTOOLS_DEB_LAYOUT=OFF \
%if !0%{?with_tests}
    -DBUILD_TESTING=OFF \
%endif
    ..

%make_build

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/kilted/setup.sh" ]; then . "/opt/ros/kilted/setup.sh"; fi
%make_install -C .obj-%{_target_platform}

%if 0%{?with_tests}
%check
# Look for a Makefile target with a name indicating that it runs tests
TEST_TARGET=$(%__make -qp -C .obj-%{_target_platform} | sed "s/^\(test\|check\):.*/\\1/;t f;d;:f;q0")
if [ -n "$TEST_TARGET" ]; then
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/kilted/setup.sh" ]; then . "/opt/ros/kilted/setup.sh"; fi
CTEST_OUTPUT_ON_FAILURE=1 \
    %make_build -C .obj-%{_target_platform} $TEST_TARGET || echo "RPM TESTS FAILED"
else echo "RPM TESTS SKIPPED"; fi
%endif

%files
/opt/ros/kilted

%changelog
* Thu Oct 02 2025 Marq Rasmussen <marq.razz@gmail.com> - 0.2.1-1
- Autogenerated by Bloom

* Wed Aug 20 2025 Marq Rasmussen <marq.razz@gmail.com> - 0.2.0-1
- Autogenerated by Bloom

